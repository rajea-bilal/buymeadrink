# BuyMeADrink MVP Implementation Tasks

## ✅ TASK 1: Database Schema Setup
Set up Convex database tables for creators, gifts, and transactions.

### Subtasks:
- [x] Create `creators` table with fields: id, handle, name, bio, profileImage, bannerImage, socialLinks
- [x] Create `gifts` table with fields: id, creatorId, title, description, price, currency, media
- [x] Create `supportTiers` table with fields: id, creatorId, name, price, description, perks
- [x] Create `giftPurchases` table with fields: id, giftId, creatorId, fanName, message, quantity, amount, stripeSessionId
- [x] Create `subscriptions` table with fields: id, tierId, creatorId, fanEmail, stripeSubscriptionId, status
- [x] Add proper indexes for fast lookups by creatorId and handle
- [x] Test database queries work correctly

## ✅ TASK 2: Creator Profile Page (`/profile/:handle`)
Build the public-facing page where fans can support creators.

### Subtasks:
- [x] Create profile page route in `app/routes/profile.$handle.tsx`
- [x] Add creator info section (name, bio, profile image, banner)
- [x] Add social media links section
- [x] Build gifts grid layout (4 per row, responsive)
- [x] Add gift selection modal with quantity picker
- [x] Add fan name and message input fields
- [x] Connect Stripe checkout for gift purchases
- [x] Show last 3 gift messages on profile (recent activity section)
- [x] Add monthly support tiers section
- [x] Make page mobile responsive
- [x] Test with real creator data

## ✅ TASK 3: Stripe Payment Integration
Set up Stripe for one-time gifts and monthly subscriptions.

### Subtasks:
- [x] Create Stripe checkout session for gifts in Convex action
- [x] Handle Stripe webhook for successful gift payments
- [x] Store payment records in database
- [x] Add error handling for failed payments
- [x] Test with Stripe test cards
- [x] Verify webhooks work correctly
- [x] **MVP: Manual payout tracking system** (instead of Stripe Connect)
- [x] Platform fee calculation (5% fee)
- [x] Creator earnings dashboard
- [x] Payout request system
- [ ] ~~Set up Stripe Connect Express for creator payouts~~ (Post-MVP)
- [ ] ~~Create Stripe subscription for monthly tiers~~ (Post-MVP)
- [ ] ~~Handle Stripe webhook for subscription events~~ (Post-MVP)

## ✅ TASK 4: Creator Dashboard (`/dashboard`)
Build basic dashboard for creators to manage their profile and view earnings.

### Subtasks:
- [x] Create dashboard route in `app/routes/dashboard.tsx`
- [x] Add tab navigation (Profile, Gifts & Tiers, Revenue)
- [x] Build Profile Setup tab with form fields
- [x] Add image upload for profile and banner
- [x] Build Gifts & Tiers management tab
- [x] Add gift creation form (title, description, price, image)
- [x] Add support tier creation form (name, price, perks)
- [x] Build Revenue Overview tab
- [x] Show total earnings, latest supporters, subscriber count
- [x] Add basic analytics (gift purchases, page views)
- [x] Test all dashboard functions work

## TASK 5: Email Notifications
Set up Resend email integration for receipts and confirmations.

### Subtasks:
- [x] Finish the Resend helper so it uses BuyMeADrink naming, sender settings, and feature flags
- [x] Write HTML email templates for gift receipt, creator gift alert, tier signup, and payout digest
- [x] Hook the Stripe gift success flow to log the order and fire the fan + creator emails
- [x] Add a subscription email hook ready to call once memberships go live
- [x] Plan a monthly payout summary job that sends the digest through Resend (simplified to dashboard display)

## TASK 6: UI Components & Styling
Build reusable components and apply consistent styling.

### Subtasks:
- [ ] Create GiftCard component for gift display
- [ ] Create TierCard component for subscription tiers
- [ ] Create GiftModal component for purchase flow
- [ ] Create CreatorHeader component for profile page
- [ ] Create DashboardStats component for revenue display
- [ ] Apply TailwindCSS styling throughout
- [ ] Make all components mobile responsive
- [ ] Add loading states for payments
- [ ] Add success/error states for forms
- [ ] Test components render correctly

## TASK 7: Creator Onboarding Flow
Build the flow for new creators to set up their profile.

### Subtasks:
- [ ] Create creator signup route
- [ ] Add handle availability check
- [ ] Build profile setup wizard
- [ ] Add Stripe Connect onboarding
- [ ] Verify Stripe account setup completed
- [ ] Create default gifts for new creators
- [ ] Add welcome email for new creators
- [ ] Test complete onboarding flow
- [ ] Add validation for required fields
- [ ] Handle onboarding errors gracefully

## TASK 8: Data Fetching & State Management
Set up proper data fetching with Convex queries and mutations.

### Subtasks:
- [ ] Create Convex queries for creator profile data
- [ ] Create Convex mutations for gift purchases
- [ ] Create Convex queries for dashboard data
- [ ] Add real-time updates for new gifts
- [ ] Add optimistic updates for better UX
- [ ] Handle loading states properly
- [ ] Add error handling for failed requests
- [ ] Test data consistency across pages
- [ ] Add pagination for large gift lists
- [ ] Optimize query performance

## TASK 9: Authentication & Security
Add basic authentication for creator dashboard access.

### Subtasks:
- [ ] Set up Clerk authentication
- [ ] Protect dashboard routes with auth
- [ ] Link user accounts to creator profiles
- [ ] Add logout functionality
- [ ] Validate user permissions for creator actions
- [ ] Secure API endpoints in Convex
- [ ] Add CSRF protection for forms
- [ ] Sanitize user input for XSS prevention
- [ ] Test authentication flow works
- [ ] Handle auth errors gracefully

## TASK 10: Testing & Polish
Final testing and UI polish before launch.

### Subtasks:
- [ ] Test complete gift purchase flow end-to-end
- [ ] Test complete subscription flow end-to-end
- [ ] Test creator dashboard functionality
- [ ] Test mobile responsiveness on real devices
- [ ] Add proper error messages for user errors
- [ ] Add success messages for completed actions
- [ ] Optimize page load speeds
- [ ] Test with different creator profiles
- [ ] Fix any UI bugs or inconsistencies
- [ ] Verify all links and buttons work correctly

---

## Implementation Notes for Claude Code:

- Use existing codebase patterns from the current project
- Follow React Router v7 conventions with loaders and actions
- Use Convex for all backend operations (queries, mutations, actions)
- Style with TailwindCSS using existing design system
- Handle payments through Stripe only (no other payment processors)
- Keep code simple and maintainable
- Add proper TypeScript types for all data structures
- Use error boundaries for graceful error handling
- Test each feature thoroughly before moving to next task
